name: SonarView
on:
  schedule:
    - cron: "0 6 * * *" # daily at 6 am
  workflow_dispatch:
    inputs:
      updaterev:
        type: string
        description: which revision to pull
        default: default
  pull_request:
defaults:
  run:
    shell: bash
jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
    - name: Cache Host keys
      id: cache-known-hosts
      uses: actions/cache@v4
      with:
        path: ~/.ssh/known_hosts
        key: ssh-known-hosts
    - run: |
        install -m 600 <(echo '${{ secrets.SSH_PRIVATE_KEY }}') ~/.ssh/id_hg
    - name: Mercurial Clone
      run: hg clone --updaterev "${{ inputs.updaterev }}" ssh://hg@codebasehq.com/digi-labs/cerulean/sonarview.hg . --ssh 'ssh -Tv -o StrictHostKeyChecking=accept-new -o BatchMode=yes -i ~/.ssh/id_hg'
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: npm
    - name: Build
      run: |
        npm ci
        # Set up for multi-arch building
        docker buildx create --name container-builder --driver docker-container --use --bootstrap
        npm run -w @cs/docker build
    - if: ${{ always() }}
      run: ssh-agent -k
  build:
    strategy:
      matrix:
        # note that we can't build for macOS from Linux
        runner: [macos-14, windows-latest, ubuntu-latest]
      fail-fast: false
    runs-on:  ${{ matrix.runner }}
    steps:
    - name: Cache Host keys
      id: cache-known-hosts
      uses: actions/cache@v4
      with:
        path: ~/.ssh/known_hosts
        key: ssh-known-hosts
    - run: |
        install -m 600 <(echo '${{ secrets.SSH_PRIVATE_KEY }}') ~/.ssh/id_hg
    - name: Install software
      if: runner.os == 'macOS'
      run:
        brew install mercurial
    - name: Mercurial Clone
      run: hg clone --updaterev "${{ inputs.updaterev }}" ssh://hg@codebasehq.com/digi-labs/cerulean/sonarview.hg . --ssh 'ssh -Tv -o StrictHostKeyChecking=accept-new -o BatchMode=yes -i ~/.ssh/id_hg -E /tmp/debug.log'
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: npm
    - name: Prebuild
      run: |
        npm ci
        # patch repo name so electron-builder puts releases in THIS repo
        # npm pkg set repository.url="${{ github.repositoryUrl }}"
    - name: Add code signing dependencies
      if: runner.os == 'macOS'
      run: |
        echo "${{ secrets.APPLE_CSC_BASE64 }}" | base64 --decode -o ${{ runner.temp }}/AppleCSC.p12
        echo CSC_LINK=${{ runner.temp }}/AppleCSC.p12 >> $GITHUB_ENV
        echo CSC_KEY_PASSWORD=mysecurepassword >> $GITHUB_ENV
        echo "${{ secrets.APPLE_API_KEY_BASE64 }}" | base64 --decode -o ${{ runner.temp }}/AppStoreConnect.p8
        echo APPLE_API_KEY=${{ runner.temp }}/AppStoreConnect.p8 >> $GITHUB_ENV
        echo APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }} >> $GITHUB_ENV
        echo APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }} >> $GITHUB_ENV
    - name: Build
      run: |
        npx quasar build -m electron -P always
      env:
        # for creating github release
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: ${{ always() }}
      run: |
        cat /tmp/debug.log
        ssh-agent -k
      
